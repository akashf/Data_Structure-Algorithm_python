class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        if any(grid[0] == [1] * n for grid in obstacleGrid):  # Check for all rows as obstacles
            return 0
        if m == 1 and n == 1 and obstacleGrid[0][0] == 1:
            return 0  # Single cell with obstacle

            
        dp = [[ 0 for x in range(0, n)] for x in range(0, m)]
        for i in range(0, m ):
            for j in range(0, n):
                if (obstacleGrid[i][j] == 0):
                    dp[i][j] = 1
                    
        for i in range(1, m):
            for j in range(1, n):
                if(dp[i][j] != 0):
                    dp[i][j] = dp[i-1][j]+dp[i][j-1]
        print(dp[m-1][n-1])
        return dp[m-1][n-1] 